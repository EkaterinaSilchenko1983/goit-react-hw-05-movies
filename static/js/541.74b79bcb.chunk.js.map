{"version":3,"file":"static/js/541.74b79bcb.chunk.js","mappings":"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","sources":["components/API/Api.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst KEY = '3413619603c71871ad15e482a73e3df2';\n\nexport const getMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n    if (response.data.results.length === 0) {\n      throw Error('Please, try againe!');\n    }\n    // console.log(response.data.results);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.config);\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n      throw Error('There is no server response. Try later again!');\n    } else if (error.request) {\n      console.log(error.request);\n      throw Error('There is no server request. Try later again!');\n    } else {\n      console.log('Error', error.message);\n      throw error;\n    }\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    if (response.data.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n    // console.log(response.data);\n\n    return response.data;\n  } catch (error) {\n    console.log(error.config);\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n      throw Error('There is no server response. Try later again!');\n    } else if (error.request) {\n      console.log(error.request);\n      throw Error('There is no server request. Try later again!');\n    } else {\n      console.log('Error', error.message);\n      throw error;\n    }\n  }\n};\n\nexport const getCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    if (response.data.results.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n    // console.log(response.data.cast);\n\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.config);\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n      throw Error('There is no server response. Try later again!');\n    } else if (error.request) {\n      console.log(error.request);\n      throw Error('There is no server request. Try later again!');\n    } else {\n      console.log('Error', error.message);\n      throw error;\n    }\n  }\n};\n\nexport const getReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n    );\n    if (response.data.results.length === 0) {\n      throw Error('There is no any match on your request!');\n    }\n    // console.log(response.data.results);\n\n    return response.data.results;\n  } catch (error) {\n    console.log(error.config);\n    if (error.response) {\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n      throw Error('There is no server response. Try later again!');\n    } else if (error.request) {\n      console.log(error.request);\n      throw Error('There is no server request. Try later again!');\n    } else {\n      console.log('Error', error.message);\n      throw error;\n    }\n  }\n};\n\nexport const searchMovies = async searchQuery => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n    );\n    if (!response.data.results.length) {\n      throw Error('There is no any match on your request!');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.response) {\n      throw Error('There is no server response. Try later again!');\n    } else if (error.request) {\n      throw Error('There is no server request. Try later again!');\n    } else {\n      throw error;\n    }\n  }\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport posterDefault from 'img/posterMovie.png';\nimport { getCast } from '../API/Api';\n\nconst Cast = () => {\n  const fotoUrl = 'https://image.tmdb.org/t/p/w300';\n\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    async function fetchMovieCast() {\n      try {\n        const movieCast = await getCast(movieId);\n\n        setMovieCast(movieCast);\n      } catch (error) {\n        toast(error.message);\n      }\n    }\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <ul>\n      {movieCast.map(cast => (\n        <li key={cast.id}>\n          <img\n            src={\n              cast.profile_path ? fotoUrl + cast.profile_path : posterDefault\n            }\n            alt={cast.name}\n            width={100}\n          />\n          <p>{cast.name}</p>\n          <p>Character: {cast.character} </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","KEY","getMovies","response","data","results","length","Error","console","log","config","status","headers","request","message","getMovieById","movieId","getCast","cast","getReviews","searchMovies","searchQuery","useParams","useState","movieCast","setMovieCast","useEffect","toast","fetchMovieCast","map","src","profile_path","posterDefault","alt","name","width","character","id"],"sourceRoot":""}