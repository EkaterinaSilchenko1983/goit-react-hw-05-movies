{"version":3,"file":"static/js/219.cda5e573.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAM,mCAECC,EAAS,mCAAG,6GAEEF,EAAAA,EAAAA,IAAA,sCAAyCC,IAF3C,UAGgB,KAD/BE,EAFe,QAGRC,KAAKC,QAAQC,OAHL,sBAIbC,MAAM,uBAJO,gCAOdJ,EAASC,KAAKC,SAPA,mCASrBG,QAAQC,IAAI,KAAMC,SACd,KAAMP,SAVW,uBAWbI,MAAM,8CAXO,YAYV,KAAMI,QAZI,uBAabJ,MAAM,8CAbO,4EAAH,qDAoBTK,EAAY,mCAAG,WAAMC,GAAN,gGAEDb,EAAAA,EAAAA,IAAA,iBACXa,EADW,oBACQZ,EADR,oBAFC,UAKK,KAHvBE,EAFkB,QAKXC,KAAKE,OALM,sBAMhBC,MAAM,oBANU,gCAUjBJ,EAASC,MAVQ,oCAYpB,KAAMD,SAZc,uBAahBI,MAAM,8CAbU,YAcb,KAAMI,QAdO,uBAehBJ,MAAM,8CAfU,4EAAH,sDAsBZO,EAAO,mCAAG,WAAMD,GAAN,gGAEIb,EAAAA,EAAAA,IAAA,iBACXa,EADW,4BACgBZ,EADhB,oBAFJ,WAEbE,EAFa,QAKLC,KAAKW,KAAKT,OALL,sBAMXC,MAAM,mBANK,gCAUZJ,EAASC,KAAKW,MAVF,oCAYf,KAAMZ,SAZS,uBAaXI,MAAM,8CAbK,YAcR,KAAMI,QAdE,uBAeXJ,MAAM,8CAfK,4EAAH,sDAsBPS,EAAU,mCAAG,WAAMH,GAAN,gGAECb,EAAAA,EAAAA,IAAA,iBACXa,EADW,4BACgBZ,EADhB,oBAFD,WAEhBE,EAFgB,QAKRC,KAAKC,QAAQC,OALL,sBAMdC,MAAM,qBANQ,gCAUfJ,EAASC,KAAKC,SAVC,oCAYlB,KAAMF,SAZY,uBAadI,MAAM,8CAbQ,YAcX,KAAMI,QAdK,uBAedJ,MAAM,8CAfQ,4EAAH,sDAsBVU,EAAY,mCAAG,WAAMC,GAAN,gGAEDlB,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACiBiB,EADjB,+CAFC,WAElBf,EAFkB,QAKVC,KAAKC,QAAQC,OALH,sBAMhBC,MAAM,qBANU,gCASjBJ,EAASC,KAAKC,SATG,oCAWpB,KAAMF,SAXc,uBAYhBI,MAAM,8CAZU,YAab,KAAMI,QAbO,uBAchBJ,MAAM,8CAdU,4EAAH,qD,yLC1FZY,EAAWC,EAAAA,GAAAA,GAAH,sEAKRC,EAAQD,EAAAA,GAAAA,IAAH,iDAGLE,EAAgBF,EAAAA,GAAAA,EAAH,oE,SCyC1B,EA3Ca,WACX,IAEQP,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAkCW,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAgBA,IAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4Bb,EAAAA,EAAAA,IAAQD,GAFpC,OAEUY,EAFV,OAIIC,EAAaD,GAJjB,iDAMIG,EAAAA,EAAAA,IAAM,KAAMC,SANhB,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACjB,IAECY,EAIL,OACE,wBACGA,EAAUM,KAAI,SAAAhB,GAAI,OACjB,UAACI,EAAD,YACE,SAACE,EAAD,CACEW,IACEjB,EAAKkB,aA7BD,kCA6B0BlB,EAAKkB,aAAeC,EAEpDC,IAAKpB,EAAKqB,KACVC,MAAO,OAET,SAACf,EAAD,UAAgBP,EAAKqB,QACrB,UAACd,EAAD,yBAA2BP,EAAKuB,UAAhC,SATavB,EAAKwB,GADH,KAexB,C","sources":["components/API/Api.js","components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst KEY = '3413619603c71871ad15e482a73e3df2';\n\nexport const getMovies = async () => {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n    if (response.data.results.length === 0) {\n      throw Error('Please, try againe!');\n    }\n    // console.log(response.data.results);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.config);\n    if (error.response) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else if (error.request) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const getMovieById = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}?api_key=${KEY}&language=en-US`\n    );\n    if (response.data.length === 0) {\n      throw Error('No movies found!');\n    }\n    // console.log(response.data);\n\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else if (error.request) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const getCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n    );\n    if (!response.data.cast.length) {\n      throw Error('No casts found!');\n    }\n    // console.log(response.data.cast);\n\n    return response.data.cast;\n  } catch (error) {\n    if (error.response) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else if (error.request) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const getReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n    );\n    if (!response.data.results.length) {\n      throw Error('No reviews found!');\n    }\n    // console.log(response.data.results);\n\n    return response.data.results;\n  } catch (error) {\n    if (error.response) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else if (error.request) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const searchMovies = async searchQuery => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n    );\n    if (!response.data.results.length) {\n      throw Error('No movies found!!');\n    }\n\n    return response.data.results;\n  } catch (error) {\n    if (error.response) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else if (error.request) {\n      throw Error('Ooops. Something went wrong... Try  again!');\n    } else {\n      throw error;\n    }\n  }\n};\n","import styled from 'styled-components';\n\nexport const ItemCast = styled.li`\n  padding-top: 40px;\n  padding-left: 100px;\n`;\n\nexport const Image = styled.img`\n  padding-bottom: 10px;\n`;\nexport const ParagraphCast = styled.p`\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport posterDefault from 'img/posterMovie.png';\nimport { getCast } from '../API/Api';\nimport { ItemCast, Image, ParagraphCast } from './Cast.styled';\n\nconst Cast = () => {\n  const fotoUrl = 'https://image.tmdb.org/t/p/w300';\n\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    async function fetchMovieCast() {\n      try {\n        const movieCast = await getCast(movieId);\n\n        setMovieCast(movieCast);\n      } catch (error) {\n        toast(error.message);\n      }\n    }\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  return (\n    <ul>\n      {movieCast.map(cast => (\n        <ItemCast key={cast.id}>\n          <Image\n            src={\n              cast.profile_path ? fotoUrl + cast.profile_path : posterDefault\n            }\n            alt={cast.name}\n            width={150}\n          />\n          <ParagraphCast>{cast.name}</ParagraphCast>\n          <ParagraphCast>Character: {cast.character} </ParagraphCast>\n        </ItemCast>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","KEY","getMovies","response","data","results","length","Error","console","log","config","request","getMovieById","movieId","getCast","cast","getReviews","searchMovies","searchQuery","ItemCast","styled","Image","ParagraphCast","useParams","useState","movieCast","setMovieCast","useEffect","toast","message","fetchMovieCast","map","src","profile_path","posterDefault","alt","name","width","character","id"],"sourceRoot":""}